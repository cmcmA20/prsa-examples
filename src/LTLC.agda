-- {-# OPTIONS --sized-types #-}
-- module LTLC where
-- 
-- open import Level using (Level; 0ℓ)
-- open import Size
-- open import Data.List
-- open import Function.Base using (id)
-- open import Relation.Unary
-- open import Relation.Unary.PredicateTransformer using (Pt)
-- open import Relation.Binary.PropositionalEquality using (_≡_)
-- 
-- open import Relation.Ternary.Core using (One)
-- open import Relation.Ternary.Structures.Syntax
-- 
-- data Ty : Set where
--   unit : Ty
--   ref : Ty → Ty
--   prod : Ty → Ty → Ty
--   _⊸_ : Ty → Ty → Ty
-- 
-- Ctx = List Ty
-- CtxT = List Ty → List Ty
-- 
-- open import Relation.Ternary.Construct.List.Disjoint Ty
-- open import Relation.Ternary.Data.Allstar Ty
-- 
-- infixr 20 _◂_
-- _◂_ : Ty → CtxT → CtxT
-- (x ◂ f) Γ = x ∷ f Γ
-- 
-- private
--   variable
--     a b c : Ty
--     ℓv : Level
--     τ : Set ℓv
--     Γ Γ₁ Γ₂ Γ₃ : List τ
-- 
-- data Exp : Ty → Ctx → Set where
--   tt : ε[ Exp unit ]
--   letunit  : ∀[ Exp unit ✴ Exp a ⇒ Exp a ]
-- 
--   var : ∀[ One a ⇒ Exp a ]
--   lam : ∀[ (a ◂ id ⊢ Exp b) ⇒ Exp (a ⊸ b) ]
--   app : ∀[ Exp (a ⊸ b) ✴ Exp a ⇒ Exp b ]
-- 
--   pair : ∀[ Exp a ✴ Exp b ⇒ Exp (prod a b) ]
--   letpair : ∀[ Exp (prod a b) ✴ ((λ Γ → a ∷ b ∷ Γ) ⊢ Exp c) ⇒ Exp c ]
-- 
--   ref : ε[ Exp a ⇒ Exp (ref a) ]
--   swaps : ∀[ Exp (ref a) ✴ Exp b ⇒ Exp (prod a (ref b)) ]
--   del : ε[ Exp (ref unit) ⇒ Exp unit ]
-- 
-- -- store types
-- ST = List Ty
-- 
-- -- values
-- data Val : Ty → Pred ST 0ℓ where
--   tt    : ε[ Val unit ]
--   clos  : Exp b (a ∷ Γ) → ∀[ Allstar Val Γ ⇒ Val (a ⊸ b) ]
--   ref   : ∀[ One a ⇒ Val (ref a) ]
--   pair  : ∀[ Val a ✴ Val b ⇒ Val (prod a b) ]
-- 
-- Store : ST → ST → Set
-- Store = Allstar Val
-- 
-- module _ {i : Size} where
--   open import Relation.Ternary.Monad.Delay public
-- --  open import Relation.Ternary.Monad.State
-- --  open StateTransformer
--   open import Relation.Ternary.Monad.State.Linear Val
--   open import Relation.Ternary.Monad.Reader
--   open ReaderTransformer Val {!!}
-- --  open ReaderTransformer Val (StateT (Delay i) {!Cells!}) ⦃ monad = state-monad ⦄
-- -- open Relation.Ternary.Monad.Reader.ReaderTransfomer
-- 
-- --   Reader' : (Γ₁ Γ₂ : Ctx) → Pt ST 0ℓ
-- --  Reader' = Reader
-- 
-- --  eval : ∀ {i Γ} → Exp a Γ → ε[ Reader Γ ε (Val a) ]
-- -- eval = ?
